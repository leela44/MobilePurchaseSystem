package MobilePurchaseSystem.dao;
import java.util.List;
import java.util.Scanner;
import MobilePurchaseSystem.entity.Mobiles;
import MobilePurchaseSystem.entity.PurchaseDetails;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.TypedQuery;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
public class Database{
	Scanner sc=new Scanner(System.in);
	Mobiles mb = new Mobiles();
	   public void insertCustomerAndPurchaseDetails() {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		try {
			System.out.print("Enter customer name (max 30 characters, first character uppercase): ");
	        String customerName = sc.nextLine();
	        System.out.print("Enter mail ID: ");
	        String mailId = sc.nextLine();
	        System.out.print("Enter phone number (exactly 10 digits): ");
	        String phoneNo = sc.nextLine();
	        System.out.print("Enter mobile ID: ");
	        int mobileId = sc.nextInt();
	        if (!validateCustomerName(customerName) || !validateMailId(mailId) || !validatePhoneNumber(phoneNo)) {
	            System.out.println("Validation failed. Please check your inputs.");
	            return;
	        }
		    Mobiles mobile = em.find(Mobiles.class, mobileId);
		    if (mobile != null && mobile.getQuantity() > 0) {
		        PurchaseDetails customer = new PurchaseDetails();
		        customer.setCustomerName(customerName);
		        customer.setMailId(mailId);
		        customer.setPhoneNo(phoneNo);
		        customer.setMobile(mobile);
		        em.persist(customer);
		        updateMobileQuantity(mobileId); 
		    } 
		    else {	
		        System.out.println("Mobile quantity is insufficient.");
		    }
		    em.getTransaction().commit();
		} 
		catch (Exception e) {
		    if (em.getTransaction().isActive()) {
		        em.getTransaction().rollback();
		    }
		    e.printStackTrace();
		} 
		finally {
		    em.close();
		    emf.close();
		}
	} 
	public static boolean validateCustomerName(String name) {
        Pattern pattern = Pattern.compile("^[A-Z][a-zA-Z]{0,19}$");   
        Matcher matcher = pattern.matcher(name);
        return matcher.matches();
    }
    	public static boolean validateMailId(String mailId) {
        Pattern pattern = Pattern.compile("^[A-Za-z0-9+_.-]+@(.+)$");  
        Matcher matcher = pattern.matcher(mailId);
        return matcher.matches();
    }
    	public static boolean validatePhoneNumber(String phone) {
        Pattern pattern = Pattern.compile("^[0-9]{10}$");  
        Matcher matcher = pattern.matcher(phone);
        return matcher.matches();
    }
	public void updateMobileQuantity(int mobileId2) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		try {
		    int mobileId = mobileId2; 
		    Mobiles mobile = em.find(Mobiles.class, mobileId);
		    if (mobile != null && mobile.getQuantity() > 0) {
		        int currentQuantity = mobile.getQuantity();
		        mobile.setQuantity(currentQuantity - 1);
		        em.merge(mobile);
		    } 
		    else {
		        System.out.println("Mobile is out of stock.");
		    }
		    em.getTransaction().commit();
		} 
		catch (Exception e) {
		    if (em.getTransaction().isActive()) {
		        em.getTransaction().rollback();
		    }
		    e.printStackTrace();
		} 
		finally {
		    em.close();
		    emf.close();
		}
	}
	public List<Mobiles> getAllMobilesDetails(){
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu");
		EntityManager em = emf.createEntityManager();
		jakarta.persistence.Query q= em.createQuery("select x from Mobiles x");
		List<Mobiles> records= (List<Mobiles>) q.getResultList();
		return records;
		
	}
	public void deleteMobile() {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		try {
			System.out.println("Enter the mobile id that is to be deleted.");
		    int mobileIdToDelete = sc.nextInt();
		    Mobiles mobileToDelete = em.find(Mobiles.class, mobileIdToDelete);
		    if (mobileToDelete != null) {
		        em.remove(mobileToDelete);
		        System.out.println("Mobile with ID " + mobileIdToDelete + " has been deleted.");
		    } 
		    else {
		        System.out.println("Mobile with ID " + mobileIdToDelete + " not found.");
		    }
		    em.getTransaction().commit();
		} 
		catch (Exception e) {
		    if (em.getTransaction().isActive()) {
		        em.getTransaction().rollback();
		    }
		    e.printStackTrace();
		} 
		finally {
		    em.close();
		    emf.close();
		}
	}
	public  void searchMobile() {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		try {
			System.out.println("Enter the minimum price range.");
		    double minPrice = sc.nextDouble(); 
		    System.out.println("Enter the maximum price range.");
		    double maxPrice = sc.nextDouble(); 
		    TypedQuery<Mobiles> query = em.createQuery("SELECT m FROM Mobiles m WHERE m.price BETWEEN :minPrice AND :maxPrice", Mobiles.class);
		    query.setParameter("minPrice", minPrice);
		    query.setParameter("maxPrice", maxPrice);
		    List<Mobiles> mobilesInRange = query.getResultList();
		    if (mobilesInRange.isEmpty()) {
		        System.out.println("No mobiles found in the specified price range.");
		    } 
		    else {
		        System.out.println("Mobiles in the price range from " + minPrice + " to " + maxPrice + ":");
		        for (Mobiles mobile : mobilesInRange) {
		            System.out.println("Mobile ID: " + mobile.getMobileId() + ", Name: " + mobile.getName() + ", Price: " + mobile.getPrice());
		        }
		    }
		    em.getTransaction().commit();
		} 
		catch (Exception e) {
		    if (em.getTransaction().isActive()) {
		        em.getTransaction().rollback();
		    }
		    e.printStackTrace();
		} 
		finally {
		    em.close();
		    emf.close();
		}
	}
	public void addMobileDetails() {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("pu");
		EntityManager em = emf.createEntityManager();
		em.getTransaction().begin();
		System.out.println("Enter any number to add more records and '0' to end.");
		int ch;
		do {
			System.out.println("Enter any number to add more records and '0' to end.");
			ch=sc.nextInt();
			if(ch!=0) {
			System.out.print("Enter mobile id:");
			mb.setMobileId(sc.nextInt());
			System.out.print("Enter mobile name:");
			mb.setName(sc.next());
			System.out.print("Enter price of the mobile:");
			mb.setPrice(sc.nextDouble());
			System.out.print("Enter the quantity of mobiles:");
			mb.setQuantity(sc.nextInt());
			}	
		}while(ch!=0);
		em.persist(mb);
		em.getTransaction().commit();
		em.close();
		emf.close();
	}
}
